<?xml version = "1.0" encoding = "ISO-8859-1"?>
<!--
	This file is auto-generated by class EL_PYXIS_PARSER (eiffel-loop.com)
	
	Pyxis is data format inspired by the Python programming language and designed to be a more
	readable supplement/substitute for XML configuration files.
	
-->
<system xmlns = "http://www.eiffel.com/developers/xml/configuration-1-16-0" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation = "http://www.eiffel.com/developers/xml/configuration-1-16-0 http://www.eiffel.com/developers/xml/configuration-1-16-0.xsd" name = "el_test" uuid = "A325754F-7BEB-44B6-937C-CC7EBDDA764F">
	<description>Eiffel-Loop Library Tests</description>
	<!--classic means C code as an intermediate language-->
	<target name = "classic">
		<root class = "APPLICATION_ROOT" feature = "make"/>
		<variable name = "build_info_dir" value = "source/root"/>
		<option syntax = "standard" full_class_checking = "false" void_safety = "none">
			<assertions precondition = "true" postcondition = "true" check = "true"/>
		</option>
		<setting name = "address_expression" value = "false"/>
		<setting name = "array_optimization" value = "false"/>
		<setting name = "check_vape" value = "true"/>
		<setting name = "console_application" value = "true"/>
		<setting name = "dead_code_removal" value = "true"/>
		<setting name = "dynamic_runtime" value = "false"/>
		<setting name = "exception_trace" value = "true"/>
		<setting name = "line_generation" value = "false"/>
		<setting name = "inlining" value = "true"/>
		<setting name = "inlining_size" value = "2"/>
		<setting name = "concurrency" value = "thread"/>
		<precompile name = "precompile" location = "$ISE_PRECOMP/EL/console-application.ecf"/>
		<library name = "base" location = "$ISE_LIBRARY/library/base/base.ecf">
			<option>
				<assertions precondition = "true" postcondition = "true" check = "true"/>
			</option>
		</library>
		<library name = "base_ext" location = "$ISE_LIBRARY/library/base_extension/base_extension.ecf"/>
		<library name = "encoding" location = "$ISE_EIFFEL/library/encoding/encoding.ecf"/>
		<library name = "thread" location = "$ISE_LIBRARY/library/thread/thread.ecf"/>
		<library name = "time" location = "$ISE_LIBRARY/library/time/time.ecf"/>
		<library name = "net" location = "$ISE_LIBRARY/library/net/net.ecf"/>
		<library name = "testing" location = "$ISE_LIBRARY/library/testing/testing.ecf"/>
		<!--Encryption-->
		<variable name = "eapml_limb_type" value = "natural_32"/>
		<library name = "arbitrary_precision_math" location = "$ISE_LIBRARY/contrib/library/math/eapml/eapml.ecf"/>
		<library name = "encryption_base" location = "$ISE_LIBRARY/contrib/library/text/encryption/eel/eel.ecf"/>
		<!--Gobo-->
		<library name = "gobo_base" location = "$EIFFEL_LOOP/library/gobo-base.ecf"/>
		<!--Eiffel Loop libraries-->
		<library name = "EL_amazon" location = "$EIFFEL_LOOP/library/amazon-instant-access.ecf" readonly = "false"/>
		<library name = "EL_app_manage" location = "$EIFFEL_LOOP/library/app-manage.ecf" readonly = "false"/>
		<library name = "EL_base" location = "$EIFFEL_LOOP/library/base/base.ecf" readonly = "false">
			<option>
				<assertions precondition = "true" postcondition = "true" check = "true"/>
			</option>
		</library>
		<!--
			; use_application_options = true
			
		-->
		<library name = "EL_c_api" location = "$EIFFEL_LOOP/library/C-language-interface.ecf" readonly = "false"/>
		<library name = "EL_compression" location = "$EIFFEL_LOOP/library/compression.ecf" readonly = "false"/>
		<library name = "EL_eco_db" readonly = "false" location = "$EIFFEL_LOOP/library/Eco-DB.ecf"/>
		<library name = "EL_encryption" location = "$EIFFEL_LOOP/library/encryption.ecf" readonly = "false"/>
		<library name = "EL_evolicity" readonly = "false" location = "$EIFFEL_LOOP/library/evolicity.ecf"/>
		<library name = "EL_ftp" readonly = "false" location = "$EIFFEL_LOOP/library/ftp.ecf"/>
		<library name = "EL_http_client" readonly = "false" location = "$EIFFEL_LOOP/library/http-client.ecf"/>
		<library name = "EL_i18n" readonly = "false" location = "$EIFFEL_LOOP/library/i18n.ecf"/>
		<library name = "EL_image_utils" readonly = "false" location = "$EIFFEL_LOOP/library/image-utils.ecf"/>
		<library name = "EL_id3_tags" location = "$EIFFEL_LOOP/library/ID3-tags.ecf" readonly = "false"/>
		<library name = "EL_logging" readonly = "false" location = "$EIFFEL_LOOP/library/logging.ecf"/>
		<library name = "EL_network" readonly = "false" location = "$EIFFEL_LOOP/library/network.ecf"/>
		<library name = "EL_os_command" readonly = "false" location = "$EIFFEL_LOOP/library/os-command.ecf"/>
		<library name = "EL_paypal" readonly = "false" location = "$EIFFEL_LOOP/library/paypal.ecf"/>
		<library name = "EL_search_engine" readonly = "false" location = "$EIFFEL_LOOP/library/search-engine.ecf"/>
		<library name = "EL_text_formats" readonly = "false" location = "$EIFFEL_LOOP/library/text-formats.ecf"/>
		<library name = "EL_testing" readonly = "false" location = "$EIFFEL_LOOP/library/testing.ecf"/>
		<library name = "EL_text_process" readonly = "false" location = "$EIFFEL_LOOP/library/text-process.ecf"/>
		<library name = "EL_thread" readonly = "false" location = "$EIFFEL_LOOP/library/thread.ecf"/>
		<library name = "EL_vtd_xml" readonly = "false" location = "$EIFFEL_LOOP/library/vtd-xml.ecf"/>
		<library name = "EL_markup_docs" readonly = "false" location = "$EIFFEL_LOOP/library/markup-docs.ecf"/>
		<library name = "EL_wav_audio" readonly = "false" location = "$EIFFEL_LOOP/library/wav-audio.ecf">
			<condition>
				<platform value = "windows"/>
			</condition>
		</library>
		<library name = "EL_wel_x_audio" readonly = "false" location = "$EIFFEL_LOOP/library/wel-x-audio.ecf">
			<condition>
				<platform value = "windows"/>
			</condition>
		</library>
		<library name = "EL_xdoc_scanning" location = "$EIFFEL_LOOP/library/xdoc-scanning.ecf" readonly = "false"/>
		<cluster name = "root" location = "source/root" recursive = "true">
			<description>
Eiffel-Loop Dev Tests

Sub-applications for testing the &apos;&apos;Eiffel-Loop&apos;&apos; libraries

See doc/test.root.txt for details
			</description>
			<file_rule>
				<exclude>/spec/unix$</exclude>
				<condition>
					<platform value = "windows"/>
				</condition>
			</file_rule>
			<file_rule>
				<exclude>/spec/windows$</exclude>
				<condition>
					<platform value = "unix"/>
				</condition>
			</file_rule>
		</cluster>
		<cluster name = "test_set" location = "source/test-set" recursive = "true">
			<description>
Eiffel-Loop Test Sets

Test sets classes inheriting [https://www.eiffel.org/doc/eiffelstudio/Testing-_Background_and_basics EQA_TEST_SET]

**Sub-applications**

* [$source AUTOTEST_DEVELOPMENT_APP]
* [$source ZSTRING_BENCHMARK_APP]
			</description>
		</cluster>
		<cluster name = "benchmark" location = "source/benchmark" recursive = "true">
			<description>
Eiffel-Loop Benchmark Testing

Benchmarks comparing performance of related routines. The benchmarks are run from a menu shell.
See class [$source BENCHMARK_APP].

See doc/test.benchmark.txt for details
			</description>
		</cluster>
	</target>
</system>
