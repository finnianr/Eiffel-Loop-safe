<?xml version = "1.0" encoding = "ISO-8859-1"?>
<!--This file is auto-generated by class EL_PYXIS_PARSER (eiffel-loop.com)-->
<system xmlns = "http://www.eiffel.com/developers/xml/configuration-1-16-0" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation = "http://www.eiffel.com/developers/xml/configuration-1-16-0 http://www.eiffel.com/developers/xml/configuration-1-16-0.xsd" name = "EL_vtd_xml" uuid = "229b77d6-09aa-11df-87c5-b77da3e246d9" library_target = "EL_vtd_xml">
	<description>
XML Document Scanning and Object Building (VTD-XML)

Classes for scanning XML documents and building Eiffel objects from XML contexts
defined by relative Xpaths. Based on the [http://vtd-xml.sourceforge.net/ VTD-XML parser].
This is a full implemenation of Xpath 1.0.

VTD-XML uses a very fast and efficient method of building a compressed representation of
an XML object using [http://vtd-xml.sourceforge.net/VTD.html virtual token descriptors].

Using the Eiffel API is considerably easier and more intuitive to use than the original
Java or C version of VTD-XML.

A substantial C-bridge was developed to make Eiffel work better with VTD-XML.
The original VTX-XML code was forked to make it possible to compile it with the MSC compiler.
This fork is found under `contrib/C&apos;.
	</description>
	<target name = "EL_vtd_xml">
		<root all_classes = "true"/>
		<option namespace = "Eiffel-Loop.Library.VTD-XML" syntax = "standard" full_class_checking = "false" void_safety = "none" trace = "false" debug = "false" warning = "true">
			<assertions precondition = "true" postcondition = "true" check = "true" invariant = "true"/>
		</option>
		<external_include location = "$(EL_C_LIB)/include">
			<description>C implementation of EL_C_CALLABLE_PROCEDURE</description>
		</external_include>
		<external_include location = "$(EL_C_LIB)/vtd2eiffel/source"/>
		<external_object location = "-L$(EL_C_LIB)/vtd2eiffel/spec/$(ISE_PLATFORM) -lvtd-xml">
			<condition>
				<platform value = "unix"/>
			</condition>
		</external_object>
		<external_object location = "$(EL_C_LIB)/vtd2eiffel/spec/$(ISE_PLATFORM)/vtd-xml.lib">
			<condition>
				<platform value = "windows"/>
			</condition>
		</external_object>
		<library name = "base" location = "$ISE_LIBRARY/library/base/base.ecf"/>
		<library name = "time" location = "$ISE_LIBRARY/library/time/time.ecf"/>
		<!--Eiffel-Loop-->
		<library name = "EL_base" location = "base/base.ecf"/>
		<library name = "EL_c_api" location = "C-language-interface.ecf"/>
		<library name = "EL_evolicity" location = "evolicity.ecf"/>
		<library name = "EL_text_formats" location = "text-formats.ecf"/>
		<library name = "EL_text_process" location = "text-process.ecf"/>
		<!--Source code-->
		<cluster name = "EL_vtd_xml" location = "persistency/xml/vtd-xml" recursive = "true">
			<file_rule>
				<exclude>/imp_mswin$</exclude>
				<condition>
					<platform value = "unix"/>
				</condition>
			</file_rule>
			<file_rule>
				<exclude>/imp_unix$</exclude>
				<condition>
					<platform value = "windows"/>
				</condition>
			</file_rule>
		</cluster>
	</target>
</system>
