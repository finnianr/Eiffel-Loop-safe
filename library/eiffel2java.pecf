pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

system:
	configuration_ns = "1-16-0"
	name = EL_eiffel2java; uuid = "229b783a-09aa-11df-87c6-93dce164c2d4" 
	library_target = EL_eiffel2java
	description: 
		"""
			Java

			A high-level framework for wrapping Java classes that adds a useful layer of abstraction to Eiffel Software's 
			interface to the JNI ([https://en.wikipedia.org/wiki/Java_Native_Interface Java Native Interface]) called
			[https://www.eiffel.org/doc/solutions/Eiffel2Java eiffel2java].

			**Features**
			* Better Java environment discovery for initialization.
			* Automates composition of JNI call signature strings.
			* Automates cleanup of Java objects.

			The framework is based on the concept of a Java agent that is similar to an Eiffel agent. You will find classes:
			[$source JAVA_FUNCTION] and 
			[$source JAVA_PROCEDURE] that inherit
			[$source JAVA_ROUTINE].
			These agent classes automatically generate correct JNI call signatures. The library allows the creation
			of recursively wrapped classes where the arguments and return types to wrapped routines are themselves
			wrapped classes.

			See [./example/eiffel2java/eiffel2java.html example/eiffel2java/eiffel2java.ecf] for an example of it's use.
		"""
	target:
		name = EL_eiffel2java
		root:
			all_classes = true

		option:
			namespace = "Eiffel-Loop.Library.Language_interface.Eiffel2Java"
			syntax = standard; full_class_checking = false; void_safety = none
			trace = false; debug = true; warning = true
			assertions:
				precondition = true; postcondition = true; check = true; invariant = true

		library: 
			name = "base"; location = "$ISE_LIBRARY/library/base/base.ecf"

		library: 
			name = api_wrapper; location = "$ISE_LIBRARY/library/api_wrapper/api_wrapper.ecf"

		#	renaming:
		#		old_name = JAVA_OBJECT; new_name = OBSOLETE_JAVA_OBJECT
		library:
			name = eiffel2java; location = "override/ES-eiffel2java.ecf"
			renaming:
				old_name = JNI_ENVIRONMENT; new_name = JAVA_ORB
			renaming:
				old_name = SHARED_JNI_ENVIRONMENT; new_name = JAVA_SHARED_ORB

		# Eiffel Loop
		library:
			name = EL_base; location = "base/base.ecf"

		library:
			name = EL_os_command; location = "os-command.ecf"

		library:
			name = EL_wel_regedit; location = "wel-regedit-x.ecf"
			condition:
				platform:
					value = windows
		
		# Source code
		cluster:
			name = EL_java; location = "language_interface/Java"; recursive = true
			file_rule:
				exclude:
					"/imp_mswin$"
				condition:
					platform:
						value = unix

			file_rule:
				exclude:
					"/imp_unix$"
				condition:
					platform:
						value = windows



