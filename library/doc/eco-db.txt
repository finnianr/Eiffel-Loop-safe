**PERSISTENCE**

Of course this is the fundamental property of any database. ''Eco-DB'' offers 2 kinds of persistence:

**1. CHAIN level persistence**

This type of persistence involves storing the entire chain to a file in one operation. This is useful for data that is more or less static, like for example the localisation table [$source EL_TRANSLATION_ITEMS_LIST]. 

See class [$source ECD_CHAIN].

**2. item level persistence**

Item level, or "incremental persistence" is where the effects of any of the basic [https://www.eiffel.org/files/doc/static/18.01/libraries/base/chain_chart.html CHAIN] operations `(extend/replace/delete**)' are recorded as they happen in a separate editions file. When the chain is loaded during object initialisation, a chain level store is loaded first, and then the stored editions are applied to bring the chain to it's final state.

See class [$source ECD_RECOVERABLE_CHAIN] for more details.

**JOINING TABLES**

Being able to join*** tables via a common field is the essence of a relational database. ''Eco-DB'' offers a number of features that support the joining of chains.

**1. Field Indexing** 

For large number of chain items, performing joins can be slow without the use of field indices. Writing code to create and maintain fields manually is very time consuming, but fortunately ''Eco-DB'' offers an easy way to maintain field indices via the implementing class [$source ECD_ARRAYED_LIST] and it's reflective descendant: [$source ECD_REFLECTIVE_ARRAYED_LIST]. See the class documentation for more details.

**2. Primary Keys**

Being able to assign a unique identifier to each item in a chain is essential to creating many kinds of data-joins. ''Eco-DB'' offers a convenient way to both generate primary keys and maintain an index for it. This is achieved with the auxilary class [$source ECD_PRIMARY_KEY_INDEXABLE] when used in conjunction with either [$source ECD_ARRAYED_LIST] or it's reflective descendant: [$source ECD_REFLECTIVE_ARRAYED_LIST].

**QUERY LANGUAGE**

Of course the Eiffel language itself can be used to query any [https://www.eiffel.org/files/doc/static/18.01/libraries/base/chain_chart.html CHAIN] list, but sometimes the meaning of the query is obscured in implementation details. What is needed is a slightly more abstract way of expressing queries that makes the meaning more apparent. This is provided by the class [$source EL_QUERYABLE_CHAIN] and it's helper [$source EL_QUERY_CONDITION_FACTORY]. The implementing class [$source ECD_ARRAYED_LIST] inherits [$source EL_QUERYABLE_CHAIN].

Conditions can be combined using the logical operators: `and', `or' and `not'. Queries are not parsed strings but actual Eiffel expressions. Some example of the expressiveness of this query language can be found in the following hierarchy of classes descended from [$source SONG_QUERY_CONDITIONS]. See project [./example/manage-mp3/manage-mp3.html Eiffel-Loop/example/manage-mp3].

(Search source code pages for routine `query')

	SONG_QUERY_CONDITIONS
		[$source STORAGE_DEVICE]
			[$source SAMSUNG_TABLET_DEVICE]
			[$source NOKIA_PHONE_DEVICE]
			[$source TEST_STORAGE_DEVICE]
		[$source RBOX_DATABASE]
			[$source RBOX_TEST_DATABASE]
		[$source RBOX_MANAGEMENT_TASK]*
			[$source COLLATE_SONGS_TASK]
			[$source PUBLISH_DJ_EVENTS_TASK]
			[$source ID3_TASK]*
				[$source ADD_ALBUM_ART_TASK]
				[$source DELETE_COMMENTS_TASK]
				[$source DISPLAY_INCOMPLETE_ID3_INFO_TASK]
				[$source DISPLAY_MUSIC_BRAINZ_INFO_TASK]
				[$source NORMALIZE_COMMENTS_TASK]
				[$source PRINT_COMMENTS_TASK]
				[$source REMOVE_ALL_UFIDS_TASK]
				[$source REMOVE_UNKNOWN_ALBUM_PICTURES_TASK]
				[$source UPDATE_COMMENTS_WITH_ALBUM_ARTISTS_TASK]
			[$source UPDATE_DJ_PLAYLISTS_TASK]
				[$source UPDATE_DJ_PLAYLISTS_TEST_TASK]
			[$source IMPORT_NEW_MP3_TASK]
				[$source IMPORT_NEW_MP3_TEST_TASK]
			[$source DEFAULT_TASK]
			[$source ARCHIVE_SONGS_TASK]
			[$source IMPORT_VIDEOS_TASK]
				[$source IMPORT_VIDEOS_TEST_TASK]
			[$source REPLACE_CORTINA_SET_TASK]
				[$source REPLACE_CORTINA_SET_TEST_TASK]
			[$source REPLACE_SONGS_TASK]
				[$source REPLACE_SONGS_TEST_TASK]
			[$source RESTORE_PLAYLISTS_TASK]
			[$source EXPORT_TO_DEVICE_TASK]*
				[$source EXPORT_MUSIC_TO_DEVICE_TASK]
					[$source EXPORT_PLAYLISTS_TO_DEVICE_TASK]
						[$source EXPORT_PLAYLISTS_TO_DEVICE_TEST_TASK]
					[$source EXPORT_MUSIC_TO_DEVICE_TEST_TASK]
				[$source EXPORT_TO_DEVICE_TEST_TASK]*
					[$source EXPORT_MUSIC_TO_DEVICE_TEST_TASK]
					[$source EXPORT_PLAYLISTS_TO_DEVICE_TEST_TASK]
			[$source TEST_MANAGEMENT_TASK]*
				[$source EXPORT_TO_DEVICE_TEST_TASK]*
				[$source IMPORT_VIDEOS_TEST_TASK]
				[$source UPDATE_DJ_PLAYLISTS_TEST_TASK]
				[$source REPLACE_SONGS_TEST_TASK]
				[$source REPLACE_CORTINA_SET_TEST_TASK]
				[$source IMPORT_NEW_MP3_TEST_TASK]
			[$source IMPORT_M3U_PLAYLISTS_TASK]

**Foot Notes**

** `delete' is a routine from [$source ECD_CHAIN] and not from `CHAIN'.

*** We are using the term ''join'' somewhat loosely and mean only that if you have two chains ''CHAIN [A]'' and ''CHAIN [B]'', you can produce a subchain of ''CHAIN [B]'' where each ''B'' item has a matching field value with an item from ''CHAIN [A]''.
