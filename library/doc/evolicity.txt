''Evolicity'' provides a way to merge the data from Eiffel objects into a text template. The template can be either supplied externally or hard-coded into an Eiffel class. The language includes, substitution variables, conditional statements and loops. Substitution variables have a BASH like syntax. Conditionals and loops have an Eiffel like syntax.

The text of this web site was generated by the Eiffel-view repository publisher (See class [$source REPOSITORY_PUBLISHER_APP]) using the following combination of ''Evolicity'' templates:

1. [https://github.com/finnianr/Eiffel-Loop/blob/master/doc-config/main-template.html.evol doc-config/main-template.html.evol]
2. [https://github.com/finnianr/Eiffel-Loop/blob/master/doc-config/site-map-content.html.evol doc-config/site-map-content.html.evol]
3. [https://github.com/finnianr/Eiffel-Loop/blob/master/doc-config/directory-tree-content.html.evol doc-config/directory-tree-content.html.evol]
4. [https://github.com/finnianr/Eiffel-Loop/blob/master/doc-config/eiffel-source-code.html.evol doc-config/eiffel-source-code.html.evol]

To make an Eiffel class serializable with ''Evolicity'' you inherit from class [$source EVOLICITY_SERIALIZEABLE]. Read the class notes for details on how to use. You can also access the substitution engine directly from the shared instance in class [$source EL_MODULE_EVOLICITY_TEMPLATES]

**Features**

* Templates are compiled to an intermediate byte code stored in `.evc' files. This saves time consuming lexing operations on large templates.
* Has a class [$source EVOLICITY_CACHEABLE_SERIALIZEABLE]
for caching the substituted output. Useful for generating pages on a web-server.

