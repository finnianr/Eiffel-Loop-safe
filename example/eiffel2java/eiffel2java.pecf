pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

# Pyxis is data format inspired by the Python programming language and designed to be a more
# readable supplement/substitute for XML configuration files.

# Pyxis as an acronym stands for: Pythonic XML ideal source.
# It is also a Latin transliteration of a Greek word for a type of pottery used by women to hold 
# cosmetics, trinkets or jewellery. 

# The following is project configuration data for an Eiffel programming language project
# compiled with the EiffelStudio IDE

# This project contains a parser for the Pyxis format and a Pyxis to XML convertion utility

system:
	configuration_ns = "1-16-0"
	name = eiffel2java; uuid = "20FD9834-3FC9-4349-AD78-73ABA2C735D4"
	description:
		"""
			Eiffel to Java

			Demonstration program for the [./library/eiffel2java.html Eiffel-Loop Java interface library].
			This library provides a useful layer of abstraction over the Eiffel Software JNI interface.
		"""
	
	# classic means C code as an intermediate language
	target: 
		name = classic

		root:
			class = APPLICATION_ROOT; feature = make

		option:
			syntax = standard; full_class_checking = false; void_safety = none
			trace = false; debug = false; warning = true
			debug:
				name = jni; enabled = true

			assertions:
				precondition = true; postcondition = true; check = true; invariant = true

		setting:
			name = address_expression; value = false

		setting:
			name = array_optimization; value = false

		setting:
			name = check_vape; value = true

		setting:
			name = console_application; value = true

		setting:
			name = dead_code_removal; value = true

		setting:
			name = dynamic_runtime; value = false

		setting:
			name = exception_trace; value = false

		setting:
			name = inlining; value = false

		setting:
			name = line_generation; value = false

		setting:
			name = concurrency; value = thread

		precompile: 
			name = precompile; location = "$ISE_PRECOMP/EL/console-application.ecf"

		variable:
			name = link_object; value = false
		
		# Invokes scons script to download Java rasterizer jar files
		external_object:
			location = "$(EIFFEL_LOOP)/contrib/Java/batik-1.7/batik-rasterizer.jar"
			condition:
				custom:
					name = link_object; value = true
					# Excluded from C linking

		# Invokes scons script to download Java Velocity jar files
		external_object:
			location = "$(EIFFEL_LOOP)/contrib/Java/velocity-1.7/velocity-1.7-dep.jar"
			condition:
				custom:
					name = link_object; value = true
					# Excluded from C linking

		library:
			name = base; location = "$ISE_LIBRARY/library/base/base.ecf"

		# Eiffel Loop overrides
		library:
			name = eiffel2java; readonly = false
			location = "$EIFFEL_LOOP/library/override/ES-eiffel2java.ecf"

		# Eiffel Loop
		library:
			name = EL_base; location = "$EIFFEL_LOOP/library/base/base.ecf"
			readonly = false

		library:
			name = EL_app_manage; location = "$EIFFEL_LOOP/library/app-manage.ecf"
			readonly = false

		library:
			name = EL_eiffel2java; location = "$EIFFEL_LOOP/library/eiffel2java.ecf"
			readonly = false
			option:
				assertions:
					precondition = true; postcondition = true; check = true

		library:
			name = EL_logging; readonly = false
			location = "$EIFFEL_LOOP/library/logging.ecf"

		library:
			name = EL_os_command; readonly = false
			location = "$EIFFEL_LOOP/library/os-command.ecf"

		library:
			name = EL_testing; readonly = false
			location = "$EIFFEL_LOOP/library/testing.ecf"

		cluster:
			name = project; location = "source"; recursive = true


